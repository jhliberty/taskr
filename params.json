{"name":"Taskr","body":"#Taskr\r\n*Simple command line utility to manage your tasks*\r\n\r\n##Usage\r\nTaskr allows you to embed all the information about the task *in* the task.\r\n\r\n - Any word in a task which begins with `:` is considered a *tag*.\r\n - The tags `:weekend, :today, :tomorrow, :tray` have a special meaning.  \r\n   Tasks tagged:\r\n   - `:today` are highlighted in a different color in the listing and get a higher priority.\r\n   - `:tomorrow` are hidden from the default listing. You can list all tasks using the `-L` switch.\r\n   - `:weekend` are visible in the default listing only on weekends. You can list all tasks using the `-L` switch.\r\n   - `:tray` are shown on the top and have a different background color, they have the highest priority. You can put tasks into your tray when you are working on them, or when you want to tackle a bunch of tasks.\r\n- Tasks which have a bunch of pluses(`+`) get their priority increased by the number of `+`s. On the other hand tasks with minuses(`-`)s in them have lower priorities\r\n\r\nDeleted tasks are copied into the `~/.taskr/tasks.taskr.done` file with a timestamp, we can probably add something in the future which allows us to check the time spent on tasks and give more insight into the kind of tasks we work on.\r\n\r\n##Features\r\n  - Tagging of tasks\r\n  - Recurring tasks (available in the [dev branch](https://github.com/minhajuddin/taskr/tarball/dev))\r\n  - Contextual task list which changes based on the day of the week (e.g. you may have some tasks to which you want to be shown only on weekends)\r\n  - Simple and powerful configuration using ruby (available in [dev branch](https://github.com/minhajuddin/taskr/tarball/dev))\r\n  - Highlighting of tasks based on deadline :today\r\n  - Simple way to prioritize tasks\r\n  - Edit your tasks in vi\r\n  - More coming soon ..\r\n\r\n\r\n##Screenshot\r\n![Screenshot](http://i.imgur.com/EtaEG.png)\r\n\r\n##File storage\r\nTaskr stores the tasks in a plain text file in the following format:\r\n\r\n\r\n````text\r\n20110913123500 setting up dotfiles :weekend :tray ++\r\n20110928154156 use slotter/dnotify as an activator for alarms and a notifier/triggerer of events and processes from dnotify :weekend :tray +\r\n20111122054143 add posts about redirection rewrites on different servers at redirectapp :weekend +++++\r\n20111115130124 google adwords setup :weekend :20111211 ++\r\n20110929083045 spool for kindle :weekend +\r\n20111010161947 setup to take screenshots of stuff on IE7 8 9 chrome firefox :weekend +\r\n20110915105500 chrome extension with persistent alarm :weekend \r\n````\r\n\r\nAs you can see it's just a text file with a timestamp for every task.\r\n\r\n##Install\r\n**You need ruby - 1.8.7 or 1.9.2 to use taskr.**\r\nInstalling taskr is pretty straightforward, run the following commands\r\n\r\n####With git\r\n````bash\r\ngit clone git://github.com/minhajuddin/taskr.git ~/.taskr-code\r\nln -s ~/.taskr-code/bin/taskr ~/bin/t\r\ncd ~/.taskr-code/ && rake setup\r\n````\r\n####Without git\r\n````bash\r\ncurl -Ls https://github.com/minhajuddin/taskr/tarball/master > /tmp/taskr.tar.gz\r\ncd /tmp/\r\ntar -xvf taskr.tar.gz\r\nmv $(find .  -maxdepth 1 -type d | grep minhajuddin*) ~/.taskr-code\r\nln -s ~/.taskr-code/bin/taskr ~/bin/t\r\ncd ~/.taskr-code/ && rake setup\r\n````\r\n\r\n\r\n##Command line help\r\n````bash\r\n$ bin/taskr -h\r\nUsage: taskr [options]\r\n  Two of the most used options are -l and -a,\r\n  and you can use these options without the switches.\r\n\r\n  e.g.\r\n    $ taskr awesome task here hurray for no switches\r\n      #adds the task to the list and is equivalent to taskr -a awes..\r\n    $ taskr\r\n      #lists all the tasks and is equivalent to 'taskr -l'\r\n\r\nOptions:\r\n    -a, --add task description                Add task to the list\r\n    -l, --list [NUM]                          List all the tasks\r\n    -L, --list-all                            List all the tasks\r\n    -d, --delete id1,id2,..                   Delete tasks(s)\r\n    -s, --search REGEX                        Search all the tasks\r\n    -e, --edit                                Open the tasks file in vi\r\n    -t, --tag id1,id2,.. :tag1 :tag2 ..,      Tag task(s)\r\n    -u, --untag id1,id2,.. :tag1 :tag2 ..,    Untag task(s)\r\n    -p, --postpone id1,id2,..                 Postpone task(s) to tomorrow\r\n    -x, --xmobar                              Text to be shown in xmobar\r\n    -v, --version                             Display version of taskr\r\n    -h, --help                                Display this screen\r\n\r\n````\r\n\r\n##Vim files\r\nThere is a small vim syntax file the vim directory, just copy it to your `~/.vim/syntax` folder and put the line below in your `~/.vimrc` to get some basic syntax highlighting when you edit the tasks raw file.\r\n\r\n````vim\r\nau BufNewFile,BufRead *.taskr  setf taskr\r\n````\r\n##FAQ\r\n 1. **Why is it not packaged as a gem?**  \r\n To make it run faster. More info here: https://gist.github.com/284823\r\n 2. **Seriously, is 0.5s is gonna make a difference?**  \r\n *Yes*, This is not just from *my* experience. The perceived slowness of many apps has made me avoid them. [Jeff Atwood post on it is a good read](http://www.codinghorror.com/blog/2011/06/performance-is-a-feature.html)  \r\n\r\n    > [Google found that] the page with 10 results took 0.4 seconds to generate. The page with 30 results took 0.9 seconds. Half a second delay caused a 20% drop in traffic. Half a second delay killed user satisfaction.\r\n    > In A/B tests, [Amazon] tried delaying the page in increments of 100 milliseconds and found that even very small delays would result in substantial and costly drops in revenue.\r\n\r\n 3. **How fast is it?**  \r\n Very fast\r\n\r\n    ````bash\r\n    $ time t\r\n    real    0m0.039s\r\n    user    0m0.040s\r\n    sys     0m0.000s\r\n    ````\r\n 4. **How is it better than Task Warrior or X?**  \r\n   It is more hackable. To efficiently use it, you don't have to learn hundreds of switches.\r\n   It's similar to markdown, in that, it allows you to attach info to your task in a way which makes sense.\r\n   Read the usage section.\r\n 5. **Give me a real reason.**  \r\n    No one loves a task manager built by others, because everyone has something which they do differently. I created this to suit my workflow and needs. And because it's built in ruby and aims to be configurable, I hope it is easier to personalize.\r\n\r\n##Todo\r\n - allow listing of tasks from other *sources*\r\n - add tab completion\r\n\r\n##Author\r\n  Created by Khaja Minhajuddin: minhajuddin (at) cosmicvent (dot) com\r\n\r\n##Credits\r\n - Uses colorize `String` extension from https://github.com/fazibear/colorize\r\n - Timeago `Time` extension from: http://stackoverflow.com/a/195894/24105\r\n\r\n##Contribute\r\nTo contribute to taskr, just clone the repository, make your changes, and send me a patch or pull request.\r\n\r\nYou can even contribute by testing the *new* features from the [dev branch](https://github.com/minhajuddin/taskr/tree/dev).\r\n[Click here to download the dev code](https://github.com/minhajuddin/taskr/tarball/dev)\r\n\r\n##Alternatives\r\n  There are a few other alternatives if you don't like this:\r\n\r\n - [Task warrior, written in C++](http://taskwarrior.org/projects/show/taskwarrior)\r\n - [dooby](https://github.com/rafmagana/dooby)\r\n\r\n","tagline":"Simple command line utility to manage your tasks","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}